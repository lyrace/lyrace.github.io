<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>移除元素 on My Blog</title>
    <link>https://lyrace.github.io/tags/%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/</link>
    <description>Recent content in 移除元素 on My Blog</description>
    <image>
      <url>https://lyrace.github.io/papermod-cover.png</url>
      <link>https://lyrace.github.io/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 27 Feb 2022 19:44:36 +0800</lastBuildDate><atom:link href="https://lyrace.github.io/tags/%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>【Leetcode】844.比较含退格的字符串</title>
      <link>https://lyrace.github.io/post/leetcode844/</link>
      <pubDate>Sun, 27 Feb 2022 19:44:36 +0800</pubDate>
      
      <guid>https://lyrace.github.io/post/leetcode844/</guid>
      <description>844.比较含退格的字符串 题目链接
给定 s 和 t 两个字符串，当它们分别被输入到空白的文本编辑器后，如果两者相等，返回 true 。# 代表退格字符。
**注意：**如果对空文本输入退格字符，文本继续为空。
示例1：
输入：s = &amp;quot;ab#c&amp;quot;, t = &amp;quot;ad#c&amp;quot; 输出：true 解释：s 和 t 都会变成 &amp;quot;ac&amp;quot;。 示例2：
输入：s = &amp;quot;ab##&amp;quot;, t = &amp;quot;c#d#&amp;quot; 输出：true 解释：s 和 t 都会变成 &amp;quot;&amp;quot;。 示例 3：
输入：s = &amp;quot;a#c&amp;quot;, t = &amp;quot;b&amp;quot; 输出：false 解释：s 会变成 &amp;quot;c&amp;quot;，但 t 仍然是 &amp;quot;b&amp;quot;。 提示：
 1 &amp;lt;= s.length, t.length &amp;lt;= 200 s 和 t 只含有小写字母以及字符 &#39;#&#39;  重构字符串 当对字符串进行修改的时候，需要使用 StringBuffer 和 StringBuilder 类</description>
    </item>
    
    <item>
      <title>【Leetcode】283.移动零</title>
      <link>https://lyrace.github.io/post/leetcode283/</link>
      <pubDate>Sat, 26 Feb 2022 18:01:08 +0800</pubDate>
      
      <guid>https://lyrace.github.io/post/leetcode283/</guid>
      <description>283.移动零 题目链接
给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。
请注意 ，必须在不复制数组的情况下原地对数组进行操作。
示例1：
输入: nums = [0,1,0,3,12] 输出: [1,3,12,0,0] 示例2：
输入: nums = [0] 输出: [0] 提示：
 1 &amp;lt;= nums.length &amp;lt;= 10^4^ -2^31^ &amp;lt;= nums[i] &amp;lt;= 2^31^ - 1  解 fast指针遍历
fast指针位置不为0时，把fast位置的元素赋值给slow位置
fast指针为0时，代表数组中有一个0元素
将slow-&amp;gt;结尾的元素赋值0
class Solution { public void moveZeroes(int[] nums) { int slow = 0; int n = nums.length; for (int fast = 0; fast &amp;lt; nums.length; fast++) { if (nums[fast] !</description>
    </item>
    
    <item>
      <title>【Leetcode】26删除有序数组中的重复项</title>
      <link>https://lyrace.github.io/post/leetcode26/</link>
      <pubDate>Fri, 25 Feb 2022 19:20:32 +0800</pubDate>
      
      <guid>https://lyrace.github.io/post/leetcode26/</guid>
      <description>26.删除有序数组中的重复项 题目链接
给你一个升序排列的数组 nums ，请你原地删除重复出现的元素，使每个元素只出现一次 ，返回删除后数组的新长度。元素的相对顺序应该保持 一致 。
由于在某些语言中不能改变数组的长度，所以必须将结果放在数组nums的第一部分。更规范地说，如果在删除重复项之后有 k 个元素，那么 nums 的前 k 个元素应该保存最终结果。
将最终结果插入 nums 的前 k 个位置后返回 k 。
不要使用额外的空间，你必须在原地修改输入数组 并在使用O(1)额外空间的条件下完成。
判题标准:
系统会用下面的代码来测试你的题解:
int[] nums = [...]; // 输入数组 int[] expectedNums = [...]; // 长度正确的期望答案 int k = removeDuplicates(nums); // 调用 assert k == expectedNums.length; for (int i = 0; i &amp;lt; k; i++) { assert nums[i] == expectedNums[i]; } 示例1：
输入：nums = [1,1,2] 输出：2, nums = [1,2,_] 解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。 示例2：</description>
    </item>
    
    <item>
      <title>【Leetcode】27.移除元素</title>
      <link>https://lyrace.github.io/post/leetcode27/</link>
      <pubDate>Wed, 23 Feb 2022 19:20:29 +0800</pubDate>
      
      <guid>https://lyrace.github.io/post/leetcode27/</guid>
      <description>27.移除元素 题目链接
给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。
不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。
元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。
说明:
为什么返回数值是整数，但输出的答案是数组呢?
请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。
你可以想象内部操作如下:
// nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝 int len = removeElement(nums, val); // 在函数里修改输入数组对于调用者是可见的。 // 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。 for (int i = 0; i &amp;lt; len; i++) { print(nums[i]); } 示例1：
输入：nums = [3,2,2,3], val = 3 输出：2, nums = [2,2] 解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。 示例2：</description>
    </item>
    
  </channel>
</rss>
