<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>LeetCode on My Blog</title>
    <link>https://lyrace.github.io/categories/leetcode/</link>
    <description>Recent content in LeetCode on My Blog</description>
    <image>
      <url>https://lyrace.github.io/papermod-cover.png</url>
      <link>https://lyrace.github.io/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 26 Feb 2022 18:01:08 +0800</lastBuildDate><atom:link href="https://lyrace.github.io/categories/leetcode/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>【Leetcode】283.移动零</title>
      <link>https://lyrace.github.io/post/leetcode283/</link>
      <pubDate>Sat, 26 Feb 2022 18:01:08 +0800</pubDate>
      
      <guid>https://lyrace.github.io/post/leetcode283/</guid>
      <description>283.移动零 题目链接
给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。
请注意 ，必须在不复制数组的情况下原地对数组进行操作。
示例1：
输入: nums = [0,1,0,3,12] 输出: [1,3,12,0,0] 示例2：
输入: nums = [0] 输出: [0] 提示：
 1 &amp;lt;= nums.length &amp;lt;= 10^4^ -2^31^ &amp;lt;= nums[i] &amp;lt;= 2^31^ - 1  解 fast指针遍历
fast指针位置不为0时，把fast位置的元素赋值给slow位置
fast指针为0时，代表数组中有一个0元素
将slow-&amp;gt;结尾的元素赋值0
class Solution { public void moveZeroes(int[] nums) { int slow = 0; int n = nums.length; for (int fast = 0; fast &amp;lt; nums.length; fast++) { if (nums[fast] !</description>
    </item>
    
    <item>
      <title>【Leetcode】26删除有序数组中的重复项</title>
      <link>https://lyrace.github.io/post/leetcode26/</link>
      <pubDate>Fri, 25 Feb 2022 19:20:32 +0800</pubDate>
      
      <guid>https://lyrace.github.io/post/leetcode26/</guid>
      <description>26.删除有序数组中的重复项 题目链接
给你一个升序排列的数组 nums ，请你原地删除重复出现的元素，使每个元素只出现一次 ，返回删除后数组的新长度。元素的相对顺序应该保持 一致 。
由于在某些语言中不能改变数组的长度，所以必须将结果放在数组nums的第一部分。更规范地说，如果在删除重复项之后有 k 个元素，那么 nums 的前 k 个元素应该保存最终结果。
将最终结果插入 nums 的前 k 个位置后返回 k 。
不要使用额外的空间，你必须在原地修改输入数组 并在使用O(1)额外空间的条件下完成。
判题标准:
系统会用下面的代码来测试你的题解:
int[] nums = [...]; // 输入数组 int[] expectedNums = [...]; // 长度正确的期望答案 int k = removeDuplicates(nums); // 调用 assert k == expectedNums.length; for (int i = 0; i &amp;lt; k; i++) { assert nums[i] == expectedNums[i]; } 示例1：
输入：nums = [1,1,2] 输出：2, nums = [1,2,_] 解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。 示例2：</description>
    </item>
    
    <item>
      <title>【Leetcode】27.移除元素</title>
      <link>https://lyrace.github.io/post/leetcode27/</link>
      <pubDate>Wed, 23 Feb 2022 19:20:29 +0800</pubDate>
      
      <guid>https://lyrace.github.io/post/leetcode27/</guid>
      <description>27.移除元素 题目链接
给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。
不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。
元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。
说明:
为什么返回数值是整数，但输出的答案是数组呢?
请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。
你可以想象内部操作如下:
// nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝 int len = removeElement(nums, val); // 在函数里修改输入数组对于调用者是可见的。 // 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。 for (int i = 0; i &amp;lt; len; i++) { print(nums[i]); } 示例1：
输入：nums = [3,2,2,3], val = 3 输出：2, nums = [2,2] 解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。 示例2：</description>
    </item>
    
    <item>
      <title>【Leetcode】367.有效的完全平方数</title>
      <link>https://lyrace.github.io/post/leetcode367/</link>
      <pubDate>Mon, 21 Feb 2022 20:14:42 +0800</pubDate>
      
      <guid>https://lyrace.github.io/post/leetcode367/</guid>
      <description>367.有效的完全平方数 题目链接
给定一个 正整数 num ，编写一个函数，如果 num 是一个完全平方数，则返回 true ，否则返回 false 。
进阶：不要 使用任何内置的库函数，如 sqrt 。
示例1：
输入：num = 16 输出：true 示例2：
输入：num = 14 输出：false 提示：
 1 &amp;lt;= num &amp;lt;= 2^31^ - 1  二分查找 class Solution { public boolean isPerfectSquare(int num) { int left = 1; int right = num; int mid = left + (right - left) / 2; while(left &amp;lt;= right){ if((long)mid * mid == num){ return true; }else if((long)mid * mid &amp;lt; num){ left = mid + 1; }else{ right = mid -1; } mid = left + (right - left) / 2; } return false; } }  乘法可能会越界，强转一下</description>
    </item>
    
    <item>
      <title>【LeetCode】69.x的平方根(未完)</title>
      <link>https://lyrace.github.io/post/leetcode69/</link>
      <pubDate>Sun, 13 Feb 2022 12:26:32 +0800</pubDate>
      
      <guid>https://lyrace.github.io/post/leetcode69/</guid>
      <description>69.x的平方根 题目链接
给你一个非负整数 x ，计算并返回 x 的算术平方根 。
由于返回类型是整数，结果只保留整数部分 ，小数部分将被舍去 。
注意：不允许使用任何内置指数函数和算符，例如 pow(x, 0.5) 或者 x ** 0.5 。
示例1：
输入：x = 4 输出：2 示例2：
输入：x = 8 输出：2 解释：8 的算术平方根是 2.82842..., 由于返回类型是整数，小数部分将被舍去。 提示：
 0 &amp;lt;= x &amp;lt;= 2 ^31^ - 1  二分查找 class Solution { public int mySqrt(int x) { int left = 1; int right = x; int mid = x / 2; while(left &amp;lt;= right){ if(mid * mid == x){ // 算数平方根是整数的  return mid; } // 乘法超出int范围-&amp;gt;long  else if((long)mid * mid &amp;lt; x){ // mid * mid 比 x 小  if((long)(mid + 1) * (mid + 1) &amp;gt; x){ // mid * mid 比 x 小且(mid + 1) * (mid + 1)比 x 大  return mid; }else if((long)(mid + 1) * (mid + 1) == x) { // mid * mid 比 x 小且(mid + 1) * (mid + 1)等于x  return mid + 1; }else{ // 否则查找范围在右半边  left = mid + 1; } }else if((long)mid * mid &amp;gt; x){ // 查找范围在左半边  right = mid - 1; } mid = left + (right - left) / 2; } return 0; } }  官方题解  class Solution { public int mySqrt(int x) { int l = 0, r = x, ans = -1; while (l &amp;lt;= r) { int mid = l + (r - l) / 2; if ((long) mid * mid &amp;lt;= x) { ans = mid; l = mid + 1; } else { r = mid - 1; } } return ans; } } 牛顿迭代法 </description>
    </item>
    
    <item>
      <title>【LeetCode】34. 在排序数组中查找元素的第一个和最后一个位置</title>
      <link>https://lyrace.github.io/post/leetcode34/</link>
      <pubDate>Sun, 30 Jan 2022 17:08:25 +0800</pubDate>
      
      <guid>https://lyrace.github.io/post/leetcode34/</guid>
      <description>34.在排序数组中查找元素的第一个和最后一个位置 题目链接
给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。
如果数组中不存在目标值 target，返回 [-1, -1]。
示例1：
输入：nums = [5,7,7,8,8,10], target = 8 输出：[3,4] 示例2：
输入：nums = [5,7,7,8,8,10], target = 6 输出：[-1,-1] 示例3：
输入：nums = [], target = 0 输出：[-1,-1] 提示：
  0 &amp;lt;= nums.length &amp;lt;= 10^5^
  -10^9^ &amp;lt;= nums[i] &amp;lt;= 10^9^
  nums 是一个非递减数组
  -10^9^ &amp;lt;= target &amp;lt;= 10^9^
  二分查找 分三种情况讨论，且在二分查找是，nums[mid]==target时仍更新，才能保证取到的是边界值
class Solution{ int[] searchRange(int[] nums, int target) { // target的左边界 比target小的那个  int leftBorder = getLeftBorder(nums, target); // target的右边界 比target大的那个  int rightBorder = getRightBorder(nums, target); // 情况一  // target 在数组范围的右边或者左边，例如数组{3, 4, 5}，target为2或者数组{3, 4, 5},target为6，此时应该返回{-1, -1}  if (leftBorder == -2 || rightBorder == -2) return new int[]{-1, -1}; // 情况三  // target 在数组范围中，且数组中存在target，例如数组{3,6,7},target为6，此时应该返回{1, 1}  if (rightBorder - leftBorder &amp;gt; 1) return new int[]{leftBorder + 1, rightBorder - 1}; // 情况二  // target 在数组范围中，且数组中不存在target，例如数组{3,6,7},target为5，此时应该返回{-1, -1}  return new int[]{-1, -1}; } // 寻找target的右边界  int getRightBorder(int[] nums, int target) { int left = 0; int right = nums.</description>
    </item>
    
    <item>
      <title>【LeetCode】35.搜索插入位置</title>
      <link>https://lyrace.github.io/post/leetcode35/</link>
      <pubDate>Sun, 30 Jan 2022 08:08:25 +0800</pubDate>
      
      <guid>https://lyrace.github.io/post/leetcode35/</guid>
      <description>35.搜索插入位置 题目链接
给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。
请必须使用时间复杂度为O(log n)的算法。
示例1：
输入: nums = [1,3,5,6], target = 5 输出: 2 示例2：
输入: nums = [1,3,5,6], target = 2 输出: 1 示例3：
输入: nums = [1,3,5,6], target = 7 输出: 4 示例4：
输入: nums = [1,3,5,6], target = 0 输出: 0 示例5：
输入: nums = [1], target = 0 输出: 0 提示：
 1 &amp;lt;= nums.length &amp;lt;= 104 -104 &amp;lt;= nums[i] &amp;lt;= 104 nums 为无重复元素的升序排列数组 -104 &amp;lt;= target &amp;lt;= 104  二分法 class Solution { public int searchInsert(int[] nums, int target) { int left = 0; int right = nums.</description>
    </item>
    
    <item>
      <title>【LeetCode】704.二分查找</title>
      <link>https://lyrace.github.io/post/leetcode704/</link>
      <pubDate>Sun, 30 Jan 2022 08:08:25 +0800</pubDate>
      
      <guid>https://lyrace.github.io/post/leetcode704/</guid>
      <description>704.二分查找 题目链接
给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。
示例1：
输入: nums = [-1,0,3,5,9,12], target = 9 输出: 4 解释: 9 出现在 nums 中并且下标为 4 示例2：
输入: nums = [-1,0,3,5,9,12], target = 2 输出: -1 解释: 2 不存在 nums 中因此返回 -1 提示：
 你可以假设 nums 中的所有元素是不重复的。 n 将在 [1, 10000]之间。 nums 的每个元素都将在 [-9999, 9999]之间。  二分查找 class Solution { public int search(int[] nums, int target) { int left = 0; int right = nums.</description>
    </item>
    
    <item>
      <title>【LeetCode】4.寻找两个正序数组的中位数（未完）</title>
      <link>https://lyrace.github.io/post/leetcode4/</link>
      <pubDate>Sat, 29 Jan 2022 18:49:13 +0800</pubDate>
      
      <guid>https://lyrace.github.io/post/leetcode4/</guid>
      <description>4.寻找两个正序数组的中位数 题目链接
给定两个大小分别为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。请你找出并返回这两个正序数组的 中位数 。
算法的时间复杂度应该为 O(log (m+n)) 。
示例1：
输入：nums1 = [1,3], nums2 = [2] 输出：2.00000 解释：合并数组 = [1,2,3] ，中位数 2 示例2：
输入：nums1 = [1,2], nums2 = [3,4] 输出：2.50000 解释：合并数组 = [1,2,3,4] ，中位数 (2 + 3) / 2 = 2.5 示例3：
输入：nums1 = [0,0], nums2 = [0,0] 输出：0.00000 示例4：
输入：nums1 = [], nums2 = [1] 输出：1.00000 示例5：
输入：nums1 = [2], nums2 = [] 输出：2.</description>
    </item>
    
    <item>
      <title>【LeetCode】1.两数之和（未完）</title>
      <link>https://lyrace.github.io/post/leetcode1/</link>
      <pubDate>Fri, 28 Jan 2022 22:19:42 +0800</pubDate>
      
      <guid>https://lyrace.github.io/post/leetcode1/</guid>
      <description>1.两数之和 题目链接
给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出和为目标值 target 的那两个整数，并返回它们的数组下标。
你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。
你可以按任意顺序返回答案。
示例 1：
输入：nums = [2,7,11,15], target = 9 输出：[0,1] 解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。 示例2：
输入：nums = [3,2,4], target = 6 输出：[1,2] 示例 3：
输入：nums = [3,3], target = 6 输出：[0,1] 提示：
 2 &amp;lt;= nums.length &amp;lt;= 104 -109 &amp;lt;= nums[i] &amp;lt;= 109 -109 &amp;lt;= target &amp;lt;= 109 只会存在一个有效答案  遍历 class Solution { public int[] twoSum(int[] nums, int target) { int[] c = new int[2]; for(int i = 0; i &amp;lt; nums.</description>
    </item>
    
  </channel>
</rss>
